name: 'build'
description: 'Build application from Dockerfile'
inputs:
  tag:
    required: true
    description: 'Tag via which built docker image will be tagged'
  build-args:
    required: false
    description: 'Build time arguments which can be passed when building docker image'
  context:
    required: false
    description: 'Build context to use with docker. Default to checked out Git directory.'
    default: .
  docker_registry:
    required: true
    description: 'Docker registry where build images would be pushed and pulled from'
  docker_username:
    required: true
    description: 'Username for authenticating with provided docker registry'
  docker_password:
    required: true
    description: 'Password for authenticating with provided docker registry'
outputs:
  image_digest:
    description: 'Built docker image reference'
    value: ${{ steps.build.outputs.digest }}
runs:
  using: composite
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    #    - name: Extract tag
    #      id: extract_tag
    #      shell: bash
    #      env:
    #        IMAGE_TAG: ${{ inputs.tag }}
    #      run: |
    #        TAG_HASH=$(sha1sum < <(printf '%s' $IMAGE_TAG))
    #        echo "##[set-output name=tag_hash;]$(echo $IMAGE)"

    # reuse docker image from cache for same commit if possible
    # note - actions/cache@v3 restores and saves cache using a single action
    #    - name: Cache docker image
    #      id: cache-docker-image
    #      uses: actions/cache@v3
    #      with:
    #        path: tmp/image-${{ steps.extract_tag.outputs.tag_hash }}.tar
    #        key: ${{ runner.os }}-docker-image-${{ github.sha }}

    - name: Login to Docker
      #      if: steps.cache-docker-image.outputs.cache-hit != 'true'
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.docker_registry }}
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Build docker image
      id: build
      #      if: steps.cache-docker-image.outputs.cache-hit != 'true'
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.context }}
        push: true
        tags: ${{ inputs.tag }}
        build-args: ${{ inputs.build-args }}
        # this cache #2 which is being internally managed by docker/build-push-action@v2
        cache-from: type=gha
        cache-to: type=gha,mode=max
    #        outputs: type=docker,dest=/tmp/image-${{ steps.extract_tag.outputs.tag_hash }}.tar

#    - name: Extract image
#      shell: bash
#      id: extract_image
#      env:
#        IMAGE_TAG: ${{ inputs.tag }}
#      run: |
#        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_TAG)
#        echo "##[set-output name=image_digest;]$(echo $IMAGE_DIGEST)"

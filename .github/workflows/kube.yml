name: kube

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
        description: "Application name based on which docker repository, doppler project and kube namespace would be selected"
      app_env:
        required: true
        type: string
        description: "Application environment based on which doppler configuration, kube namespace and kube spec files would be selected"
      app_hostname:
        required: true
        type: string
        description: "Application hostname where application would be deployed. Available placeholders - {0} Provided application environment, {1} Branch ID generated from provided branch"
      branch:
        required: true
        type: string
        description: "Branch from which this workflow was run"
      branch_base:
        required: false
        type: string
        description: "If analyze is enabled, this refers to the base branch against with sonarqube will run code analysis"
      build_args:
        required: false
        type: string
        description: "Build arguments provided to the docker daemon when building the image"
      pull_request_number:
        required: false
        type: number
        description: "Pull request number running the workflow against a pull request"
      steps:
        required: false
        type: string
        description: "If provided, only specified steps would be run by the workflow. Value to be provided in CSV format."
      platform_version:
        required: false
        type: string
        description: "Branch from which platform will be checked out to use actions"
        default: "feature/e2e"
    secrets:
      docker_registry:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
      do_access_token:
        required: true
      do_cluster_id:
        required: true
      doppler_token:
        required: false
      sonar_token:
        required: false
      sonar_host_url:
        required: false

jobs:
  analyze:
    runs-on: ubuntu-latest
    if: inputs.steps == '' || contains(join(inputs.steps), 'analyze')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: sonarqube-scan-branch
        uses: sonarsource/sonarqube-scan-action@master
        if: inputs.pull_request_number
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ secrets.sonar_host_url }}
        with:
          args: >
            -Dsonar.pullrequest.key=${{ inputs.pull_request_number }}
            -Dsonar.pullrequest.branch=${{ inputs.branch }}
            -Dsonar.pullrequest.base=${{ inputs.branch_base }}

      - name: sonarqube-scan-branch
        uses: sonarsource/sonarqube-scan-action@master
        if: inputs.pull_request_number == ''
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ secrets.sonar_host_url }}
        with:
          args: >
            -Dsonar.branch.name=${{ inputs.branch }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform
          ref: ${{ inputs.platform_version }}

      - name: Build application
        uses: ./platform/.github/actions/build
        with:
          tag: ${{ inputs.app_name }}
          build-args: ${{ inputs.build_args }}

  lint:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'lint')
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform
          ref: ${{ inputs.platform_version }}

      - name: Run lint checks
        uses: ./platform/.github/actions/lint
        with:
          tag: ${{ inputs.app_name }}

  test:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'test')
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform
          ref: ${{ inputs.platform_version }}

      - name: Run automated test cases
        uses: ./platform/.github/actions/test
        with:
          tag: ${{ inputs.app_name }}

  e2e:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'e2e')
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform
          ref: ${{ inputs.platform_version }}

      - name: Run automated e2e test cases
        uses: ./platform/.github/actions/e2e
        with:
          tag: ${{ inputs.app_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'deploy')
    # make sure to run a single deployment job against the provided branch
    # following will prioritize the most recent invocation and cancel existing ones if any were found
    # important - make sure deploy and clean are using same group
    concurrency:
      group: default-${{ inputs.app_env }}-${{ inputs.branch }}
      cancel-in-progress: true
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform
          ref: ${{ inputs.platform_version }}

      - name: Deploy application to Kubernetes
        id: deploy
        uses: ./platform/.github/actions/deploy
        with:
          app_name: ${{ inputs.app_name }}
          app_env: ${{ inputs.app_env }}
          app_hostname: ${{ inputs.app_hostname }}
          branch: ${{ inputs.branch }}
          docker_registry: ${{ secrets.docker_registry }}
          docker_username: ${{ secrets.docker_username }}
          docker_password: ${{ secrets.docker_password }}
          do_access_token: ${{ secrets.do_access_token }}
          do_cluster_id: ${{ secrets.do_cluster_id }}
          doppler_token: ${{ secrets.doppler_token }}

      - uses: marocchino/sticky-pull-request-comment@v2
        # only run this step if a pull request number was provided
        if: inputs.pull_request_number
        with:
          hide_and_recreate: true
          hide_classify: "OUTDATED"
          number: ${{ inputs.pull_request_number }}
          message: |
            Deployment is available at - ${{ steps.deploy.outputs.url }}

  clean:
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    # list all jobs after which clean up should be performed
    needs: ["lint", "test", "deploy"]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: myappartifact
          failOnError: false

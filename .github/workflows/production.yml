name: production

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      app_hostname:
        required: true
        type: string
      branch:
        required: true
        type: string
      steps:
        required: false
        type: string
    secrets:
      docker_registry:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
      do_access_token:
        required: true
      do_cluster_id:
        required: true
      doppler_token:
        required: false
      sonar_token:
        required: false
      sonar_host_url:
        required: false

jobs:
  analyze:
    runs-on: ubuntu-latest
    if: inputs.steps == '' || contains(join(inputs.steps), 'analyze')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: sonarqube-scan-branch
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ secrets.sonar_host_url }}
        if: "${{ env.SONAR_TOKEN != '' }}"
        with:
          args: >
            -Dsonar.branch.name=${{ inputs.branch }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform

      - name: Build application
        uses: ./platform/.github/actions/build
        with:
          tag: ${{ inputs.app_name }}

  lint:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'lint')
    steps:
      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform

      - name: Runs lint checks
        uses: ./platform/.github/actions/lint
        with:
          tag: ${{ inputs.app_name }}

  test:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.steps == '' || contains(join(inputs.steps), 'test')
    steps:
      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform

      - name: Run automated test cases
        uses: ./platform/.github/actions/test

  deploy:
    needs: [ 'build', 'test' ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (source)
        uses: actions/checkout@v2

      - name: Checkout (action)
        uses: actions/checkout@v2
        with:
          repository: jalantechnologies/platform-github
          path: platform

      - name: Deploy built application to Kubernetes
        id: deploy
        uses: ./platform/.github/actions/deploy
        with:
          app_name: ${{ inputs.app_name }}
          app_env: production
          app_hostname: ${{ inputs.app_hostname }}
          branch: ${{ inputs.branch }}
          docker_registry: ${{ secrets.docker_registry }}
          docker_username: ${{ secrets.docker_username }}
          docker_password: ${{ secrets.docker_password }}
          do_access_token: ${{ secrets.do_access_token }}
          do_cluster_id: ${{ secrets.do_cluster_id }}
          doppler_token: ${{ secrets.doppler_token }}

  clean:
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    # list all jobs after which clean up should be performed
    needs: [ 'lint', 'test', 'deploy' ]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: myappartifact
          failOnError: false

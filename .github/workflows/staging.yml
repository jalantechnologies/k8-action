name: staging

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      app_hostname:
        required: true
        type: string
      branch:
        required: true
        type: string
      branch_base:
        required: false
        type: string
      pull_request_number:
        required: false
        type: number
    secrets:
      docker_registry:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
      doppler_token:
        required: true
      do_access_token:
        required: true
      do_cluster_id:
        required: true
      sonar_token:
        required: false
      sonar_host_url:
        required: false

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: sonarqube-scan-branch
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ secrets.sonar_host_url }}
        if: "${{ env.SONAR_TOKEN != '' }}"
        with:
          args: >
            -Dsonar.pullrequest.key=${{ inputs.pull_request_number }}
            -Dsonar.pullrequest.branch=${{ inputs.branch }}
            -Dsonar.pullrequest.base=${{ inputs.branch_base }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build docker image
        shell: bash
        run: |
          docker build --platform linux/amd64 -t ${{ inputs.app_name }} .
          docker save ${{ inputs.app_name }} > /tmp/myappimage.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myappartifact
          path: /tmp/myappimage.tar

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myappartifact
          path: /tmp

      - name: Run linting
        shell: bash
        run: |
          docker load --input /tmp/myappimage.tar
          docker run -t ${{ inputs.app_name }} npm run lint

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myappartifact
          path: /tmp

      - name: Run tests
        shell: bash
        run: |
          docker load --input /tmp/myappimage.tar
          docker-compose -f docker-compose.test.yml up --exit-code-from app

  preview:
    runs-on: ubuntu-latest
    needs: build
    # make sure to run a single job against the provided branch
    # following will prioritize the most recent invocation and cancel existing ones if any were found
    # important - make sure preview and clean are using same group
    concurrency:
      group: preview-${{ inputs.branch }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.do_access_token }}

      - name: Setup Kubernetes
        shell: bash
        env:
          DO_CLUSTER_ID: ${{ secrets.do_cluster_id }}
        run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_ID

      - name: Install doppler
        uses: dopplerhq/cli-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myappartifact
          path: /tmp

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH_NAME=$(echo ${{ inputs.branch }} | sed -e 's/^refs\/heads\///g' | tr '[:upper:]' '[:lower:]')
          echo "##[set-output name=branch;]$(echo $BRANCH_NAME | sed -e 's/[_\/]/-/g')"
          echo "##[set-output name=branch_id;]$(echo $BRANCH_NAME | sed -e 's/[_\/\-]//g' | cut -c -10)"

      - name: Push docker image
        shell: bash
        id: docker_image
        env:
          DOCKER_REGISTRY: ${{ secrets.docker_registry }}
          DOCKER_REPOSITORY: ${{ inputs.app_name }}
          DOCKER_USERNAME: ${{ secrets.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch_id }}
        run: |
          IMAGE_NAME=$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
          
          docker login $DOCKER_REGISTRY --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          docker load --input /tmp/myappimage.tar
          docker tag ${{ inputs.app_name }} $IMAGE_NAME
          docker push $IMAGE_NAME
          
          echo "##[set-output name=name;]$(echo $IMAGE_NAME)"

      - name: Deploy to kubernetes
        shell: bash
        id: deploy
        env:
          DOPPLER_PROJECT: ${{ inputs.app_name }}
          DOPPLER_CONFIG: preview
          DOPPLER_TOKEN: ${{ secrets.doppler_token }}
          KUBE_NS: ${{ inputs.app_name }}-preview
          KUBE_APP: ${{ inputs.app_name }}-preview-${{ steps.extract_branch.outputs.branch_id }}
          KUBE_ENV: preview
          KUBE_DEPLOYMENT_IMAGE: ${{ steps.docker_image.outputs.name }}
          KUBE_INGRESS_HOSTNAME: ${{ steps.extract_branch.outputs.branch }}.${{ inputs.app_hostname }}
        run: |
          source deploy/kube.sh
          echo "##[set-output name=url;]$(echo https://$KUBE_INGRESS_HOSTNAME)"

      - name: Extract pull request number
        id: extract_pr_number
        uses: jwalton/gh-find-current-pr@v1

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          hide_and_recreate: true
          hide_classify: 'OUTDATED'
          number: ${{ steps.extract_pr_number.outputs.number }}
          message: |
            Preview is available at - ${{ steps.deploy.outputs.url }}
